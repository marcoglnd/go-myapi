// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/marcoglnd/go-myapi/internal/webapp/domain"
	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// WebappService is an autogenerated mock type for the WebappService type
type WebappService struct {
	mock.Mock
}

// GetCrypto provides a mock function with given fields: id
func (_m *WebappService) GetCrypto(id string) (*domain.CryptoResponse, error) {
	ret := _m.Called(id)

	var r0 *domain.CryptoResponse
	if rf, ok := ret.Get(0).(func(string) *domain.CryptoResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CryptoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCryptoById provides a mock function with given fields: url
func (_m *WebappService) GetCryptoById(url string) (domain.CryptoResponse, error) {
	ret := _m.Called(url)

	var r0 domain.CryptoResponse
	if rf, ok := ret.Get(0).(func(string) domain.CryptoResponse); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(domain.CryptoResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCryptoChannel provides a mock function with given fields: id, ch, wg
func (_m *WebappService) GetCryptoChannel(id string, ch chan<- domain.CryptoResponse, wg *sync.WaitGroup) {
	_m.Called(id, ch, wg)
}

// GetRandomCrypto provides a mock function with given fields:
func (_m *WebappService) GetRandomCrypto() []domain.CryptoResponse {
	ret := _m.Called()

	var r0 []domain.CryptoResponse
	if rf, ok := ret.Get(0).(func() []domain.CryptoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CryptoResponse)
		}
	}

	return r0
}

type mockConstructorTestingTNewWebappService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebappService creates a new instance of WebappService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebappService(t mockConstructorTestingTNewWebappService) *WebappService {
	mock := &WebappService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
